// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Feedback {
  id          String    @id @default(cuid())
  title       String
  description String
  category    String
  status      String    @default("suggestion")
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  upvotes     Upvote[]
}

model Comment {
  id                  String    @id @default(cuid())
  content             String
  feedbackId          String
  feedback            Feedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  replyingToUserId    String?
  replyingToUser      User?     @relation("replyToUser", fields: [replyingToUserId], references: [id])
  replyingToCommentId String?
  replyingToComment   Comment?  @relation("replies", fields: [replyingToCommentId], references: [id])
  author              User      @relation(fields: [authorId], references: [id])
  authorId            String
  replies             Comment[] @relation("replies")
}

model Upvote {
  id         String   @id @default(cuid())
  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, feedbackId], name: "userId_feedbackId") // <-- this is the unique constraint
  @@index([feedbackId])
  @@index([userId])
  @@map("upvotes")
}

model User {
  id              String     @id @default(cuid())
  // name            String?
  username        String
  feedbacks       Feedback[]
  comments        Comment[]
  repliedComments Comment[]  @relation("replyToUser")
  upvotes         Upvote[]
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
